1.Как отказаться от изменений в файле (файлах) находящийся в рабочем каталоге (work directory)?
git checkout -- имя_файла

2.Как вернуть файл из индекса в рабочий каталог?
git reset example.txt

3.Как отменить ошибочный commit ? 

git commit --amend -m 

4.Как исправить коммит отправленный на сервер GitHub?

Если коммит, который вы пытаетесь изменить, уже был запушен на удаленный сервер (например, GitHub), вам может потребоваться использовать -f или --force флаг при следующем пуше, чтобы обновить историю на сервере:

git push --force origin main

 5.Как создать новую ветку и переключится в нее? 

git branch <имя ветки>  создать новую ветку 

 git checkout <имя ветки>  перейти в ветку

git push origin  Эта команда отправит вашу ветку на сервер, где она также будет доступна другим разработчикам.
  
6.В чем отличие между fast-forward merge and non fast-forward merge?

Fast-forward merge: Это тип слияния, который возможен, когда изменения в ветке, которую вы сливаете, можно просто быстро перенести в текущую ветку без создания дополнительного коммита слияния. Он создает линейную историю коммитов.

Non fast-forward merge: Это тип слияния, который создает дополнительный коммит слияния, даже если изменения в ветке можно было бы влить без создания коммита слияния. Этот метод сохраняет более подробную историю слияния и может использоваться, например, для объединения разных веток разработки.

 7.Когда может возникнуть конфликт слияния веток, как его разрешить? 

Конфликт слияния веток в Git возникает тогда, когда две ветки, которые вы пытаетесь слить (обычно текущая ветка и целевая ветка), имеют изменения в одной и той же части файла, которые не могут быть автоматически объединены Git. Конфликты могут возникнуть в следующих ситуациях:

Изменения в одной и той же строке: Обе ветки внесли изменения в одну и ту же строку кода, и Git не может определить, какие изменения следует сохранить.

Удаление и изменение: Одна ветка удалила строку, а другая внесла изменения в эту же строку. Git не может понять, что следует делать.

Удаление ветви: Если одна из веток была удалена и позже попытка слить удаленную ветку, это также вызовет конфликт.

Для разрешения конфликта слияния веток вы можете следовать этим шагам:

Git сообщит вам о наличии конфликта и выделит конфликтующие участки в файлах. Вы увидите что-то подобное:
plaintext
Copy code
<<<<<<< HEAD
Код из текущей ветки
=======
Код из целевой ветки
>>>>>>> branch_name

Вам нужно решить, какие изменения сохранить и какие отбросить. Это может включать в себя внесение ручных правок в код.

После решения конфликта в файлах, вы должны добавить измененные файлы в индекс с помощью команды git add имя_файла.

Затем завершите слияние с помощью команды git commit. Git создаст автоматический коммит, который закроет конфликт слияния.

После успешного разрешения конфликта вы можете продолжить работу слияния или продолжить свою работу в проекте.

Важно помнить, что разрешение конфликта требует внимательности и внимательного анализа изменений. Убедитесь, что сохраняете нужные изменения и не теряете важные данные при разрешении конфликта.

8.Можно ли удалить ветку? Как?

git branch -d <название_ветки>






